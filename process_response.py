from kol import *
from submit_to_dialog_flow import *
from ocr import *
from datetime import datetime
from datetime import time
from backer import *
from recommendation import *
from translation import *
from backer.example_flows import *

# def classify_chatbot_query(text):
#   return 'asking for product recommendation'



def process_response(text):
  text = translate(text)
  classification = classify_chatbot_query(text, use_intent=False)
  print('classification, ', classification)
  if classification ==  'asking for recommendation':
    response = recommendation_flow(text)
    
    
    '''
    the idea is that backer is running on google cloud
    say for the moment that it calls the docker image running on 
    this laptop.
    so it loads product descriptions, etc.
    https://www.kolpartner.cn/kol-rest/uploadfile/2020/1126/f5e0d8245b4babbaa29606cd8ff700cc.jpg

       
    
    '''

    return response
  else:
    return [{'type': 'Do not respond'}]




# def recognise_image_text(image):
#   return detect_text('1.png')
# 
# def recognise_brand_in_image_text(image_text):
#   return image_text
# 
# def need_to_call_api(text):
#   if 'call_api' in text:
#     return True
#   else:
#     return False
#   
# def get_item(response):
#   try:
#     return response['result']['contexts']['item']
#   except:
#     return None
# 
# def search_for_brand_in_parameters(response):
#   try:
#     return response['result']['parameters']['brand']
#   except:
#     return None
# 
# def search_for_brand_crude(response):
#   print(response)
#   response = response['result']['resolvedQuery'].replace('‰Ω†ÊúâÂÜá', '')
#   print(response)
#   response = response.replace('?', '')
#   response = response.replace('Ôºü', '')
#   response = response.replace('Âë¢ÂÄãÁâåÂ≠ê','')
#   print(response)
#   return response
# 
# def get_brand(response):
#   brand = None
#   try:
#     contexts = response['result']['contexts']
#     for context in contexts:
#       if 'brand-' in context['name']:
#         brand = context['name'].replace('brand-', '')
#         return brand
#     if brand == None:
#       brand = search_for_brand_in_parameters(response)
#     print("&&&&")
#     print(brand)
#     print(response)
#     if brand == None or brand == '':
#       print('MATEY')
#       
#       brand = search_for_brand_crude(response)
#     return brand      
# 
#   except:
#     return None
# 
# def need_to_multiply(text):
#   if 'multiply_by' in text:
#     return True
#   else:
#     return False
# 
# def show_covid_landing_message(text):
#   if 'covid_landing_message' in text:
#     return True
#   else:
#     return False
# 
# def store_name(text):
#   if 'store_name' in text:
#     return True
#   else:
#     return False
# 
# def store_amount(text):
#   if 'store_amount' in text:
#     return True
#   else:
#     return False  
# 
# def store_address(text):
#   if 'store_address' in text:
#     return True
#   else:
#     return False  
# 
# def store_location_number(text):
#   if 'store_location_number' in text:
#     return True
#   else:
#     return False  
# 
# def finished_delivery(text):
#   if 'finished_delivery' in text:
#     return True
#   else:
#     return False  
# 
# def finished_pickup(text):
#   if 'finished_pickup' in text:
#     return True
#   else:
#     return False 
# 
# def check_time(text):
#   if 'check_time' in text:
#     return True
#   else:
#     return False
# 
# def produce_report(chat_manager):
#   file = open('Orders.csv', 'a')
#   file.write('\n')
#   file.write('\t'.join([chat_manager.covid_data['name'], chat_manager.covid_data['address'], chat_manager.covid_data['phone_number'], chat_manager.covid_data['amount'], chat_manager.covid_data['pickup_time']]))
#   file.close()
# 
# 
# def make_time(time_str):
#   return datetime.strptime(time_str, '%H:%M:%S').time()
# 
# def is_possible_time(text):
#   time_str = text.split('check_time ')[1]
#   time_object = make_time(time_str)
#   nine_am = make_time('09:00:00')
#   six_pm = time(18, 0, 0)
#   if time_object < nine_am:
#     hour = time_object.hour
#     minute = time_object.minute
#     time_object = time(hour + 12, minute, 0)
#   if time_object < six_pm:
#     return True, time_object.strftime('%H:%M')
#   return False, time_object.strftime('%H:%M')
# 
# def process_need_call_api(response, chat_manager=None):
#   text = get_text(response)
#   if need_to_call_api(text):
#     item = get_item(response)
#     brand = get_brand(response)
#     result = search_for_item(brand)
#     if result['data']['list'] == []:
#       response = submit('product not available')
#       return get_text(response), chat_manager
#     else:
#       response = 'ÊàëÂìãÊúâÂë¢ÂÄãÁâåÂ≠êÔºö\n' + '\ns'.join([x['nameHk'] for x in result['data']['list']])
#       return response, chat_manager
#   if need_to_multiply(text):
#     amount = int(text.replace('multiply_by ', ''))
#     return 'Total: $90 x ' + str(amount) + ' = $' + str(amount * 90) + '\n' + 'Ë´ãÂïè‰Ω†ÊÉ≥‰ª•Âí©ÊñπÂºè‰∫§Êî∂Ôºü', chat_manager
#   if show_covid_landing_message(text):
#     response = '''‰Ω†Â•Ω,ÊàëÂÄëÊòØSTAY GOLDüòä 
# ÈÄôÊòØË®ÇARISTA Âç≥È©óÂç≥Áü• Covid-19 AntigenÊ∏¨Ë©¶Ê£íÁöÑÊúçÂãô„ÄÇ
# ‰Ω†Âè´Âí©ÂêçÔºü '''
#     return response, chat_manager
#   if store_name(text):
#     name = text.split('store_name ')[1]
#     chat_manager.covid_data['name'] = name
#     return '‰Ω†ÊÉ≥Ë¶ÅÂπæÂ§ö? (ÊØè‰∫∫ÈôêÈáèË≥ºË≤∑10Êûù)', chat_manager
#   if store_amount(text):
#     amount = text.split('store_amount ')[1]
#     chat_manager.covid_data['amount'] = amount
#     return '‰Ω†Ë¶Å‰æÜÊàëÂìãÂòÖÂàÜÂ∫óÂèñÂÆö‰øÇÁïÄ‰∏ÄÂÄãÈÄÅË≤®Âú∞ÂùÄÔºü', chat_manager
#   if store_address(text):
#     address = text.split('store_address ')[1]
#     chat_manager.covid_data['address'] = address
#     chat_manager.covid_data['pickup_time'] = ''
#     return '''Áî¢ÂìÅÂêçÁ®±: Arista Âç≥È©óÂç≥Áü•„ÄåÊñ∞ÂÜ†ÁóÖÊØí„ÄçÂø´ÈÄüÊ∏¨Ë©¶Ê£í 
#     Êï∏Èáè: ''' + chat_manager.covid_data['amount'] + '''
#     Êî∂‰ª∂‰∫∫: ''' + chat_manager.covid_data['name'] + '''
#     Êî∂‰ª∂Âú∞ÂùÄ: ''' + chat_manager.covid_data['address'] + '''
#     Ë®ÇÂñÆÁ∑®Ëôü: 1234
#     Ë´ãÂïèË≥áÊñôÊ≠£Á¢∫Âòõ?üòä ''', chat_manager   
#   if store_location_number(text):
#     location_number = text.split('store_location_number')[1]
#     locations = ['ÁìèÈñÄÂÜ∞ÂÆ§ÈäÖÈëºÁÅ£ÂàÜÂ∫ó', 'ÁìèÈñÄÂÜ∞ÂÆ§Â∞ñÊ≤ôÂò¥ÂàÜÂ∫ó', 'ÁìèÈñÄÂÜ∞ÂÆ§Ê≤ôÁî∞ÂàÜÂ∫ó', 'ÁìèÈñÄÂÜ∞ÂÆ§ËçÉÁÅ£ÂàÜÂ∫ó', 'ÁìèÈñÄÂÜ∞ÂÆ§Â±ØÈñÄÂàÜÂ∫ó', 'Maxi House ÈªÉÁ´πÂùëÈÅì49ËôüÂæóÂäõÂ∑•Ê•≠Â§ßÂªà16Ê®ìFÂÆ§']
#     location = locations[int(location_number)]
#     chat_manager.covid_data['address'] = location
#     return '''Áî¢ÂìÅÂêçÁ®±: Arista Âç≥È©óÂç≥Áü•„ÄåÊñ∞ÂÜ†ÁóÖÊØí„ÄçÂø´ÈÄüÊ∏¨Ë©¶Ê£í 
#     Êï∏Èáè:''' + chat_manager.covid_data['amount'] + '''
#     Êî∂‰ª∂‰∫∫''' + chat_manager.covid_data['name'] + '''
#     ÂèñË≤®Âú∞ÂùÄ: ''' + location + '''
#     Ë®ÇÂñÆÁ∑®Ëôü: 1234
#     Ë´ãÂïèË≥áÊñôÊ≠£Á¢∫Âòõ?üòä''', chat_manager
#   if finished_delivery(text):
#     produce_report(chat_manager)
#     return 'Ë¨ùË¨ùüòäÊàëÂÄëÂØÑÂá∫ÂæåÊúÉÁµ¶‰Ω†È†ÜË±êËôüÁöÑüôè', chat_manager
#   if finished_pickup(text):
#     return 'ÊúÄÂø´ÈúÄË¶ÅÊòéÂ§©„ÄÇ‰Ω†Ë¶ÅÂπæÊôÇ‰æÜÊîû?', chat_manager
#   if check_time(text):
#     is_possible, time_str = is_possible_time(text)
#     if is_possible:
#       chat_manager.covid_data['pickup_time'] = time_str
#       produce_report(chat_manager)
#       return 'Â•ΩÁöÑÔºåÂèØ‰ª•', chat_manager
#     else:
#       return 'ÊàëÂÄëÂÖ≠ÈªûÈñÇÈñÄüôè'
#   return get_text(response), chat_manager
  
  
  
  
  
  